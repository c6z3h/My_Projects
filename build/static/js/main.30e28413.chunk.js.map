{"version":3,"sources":["components/Links.js","components/SubmitForm.js","components/Notification.js","services/links.js","App.js","services/reactGA.js","index.js"],"names":["Links","url","randomNumber","console","log","length","href","link","SubmitForm","addLink","data","onSubmit","value","newLink","onChange","handleLinkChange","placeholder","newType","handleTypeChange","type","Notification","message","className","baseUrl","axios","get","then","response","linkObject","post","Footer","style","color","background","fontStyle","fontSize","left","bottom","right","App","useEffect","page","ReactGA","initialize","pageview","linkService","allLinks","setGIFLinks","setWebLinks","useState","links","setLinks","setNewLinks","setNewType","notifMessage","setNotifMessage","GIFLinks","webLinks","addLinkData","event","target","GIFArray","map","GIFobject","JSON","stringify","ListOfLinkOfChoice","selectedPicture","Math","floor","random","backgroundImage","preventDefault","returnedLinks","concat","setTimeout","catch","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30e28413.chunk.js","sourcesContent":["const Links = ({url, randomNumber}) => {\r\n    console.log(\"weblinks: \",url)\r\n    console.log(\"weblinks randNo: \",randomNumber)\r\n    if (url.length !== 0){\r\n        return (\r\n            <div>\r\n            {/* <img alt=\"\" src=\"\"> image </img>\r\n            <ul className='link' href={url.link}> description </ul> */}\r\n            <a href={url[randomNumber].link}>Inspiration here!</a>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nexport default Links","// import DropdownButton from 'react-bootstrap/DropdownButton';\r\n// import Dropdown from 'react-bootstrap/Dropdown'\r\n// import React, { useState, useEffect } from 'react'\r\n// import { SafeAreaView, StyleSheet, TextInput } from \"react-native\";\r\n\r\nconst SubmitForm = ({addLink,data}) => {\r\n    // const [display, handleDisplayChange] = useState('');\r\n    // const onChangeDisplay = (event) => handleDisplayChange(event.target.value)\r\n\r\n    return(\r\n        <form onSubmit={addLink}>\r\n            <div>\r\n                {/* <SafeAreaView> */}\r\n                URL: <input\r\n                value={data.newLink}\r\n                onChange={data.handleLinkChange}\r\n                placeholder=\"https://upload.wikimedia.org/wikipedia/commons/...\"\r\n                />\r\n                {/* </SafeAreaView> */}\r\n                <select value={data.newType} onChange={data.handleTypeChange}>\r\n                    <option> </option>\r\n                    <option value=\"GIF\">GIF</option>\r\n                    <option value=\"link\">Link</option>\r\n                </select>\r\n                {/* make this a button: GIF or link */}\r\n                {/* Type (GIF / link): <input\r\n                value={data.newType}\r\n                onChange={data.handleTypeChange}\r\n                /> */}\r\n                {/* <DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\" onSelect={data.handleTypeChange}>\r\n                    {/* <Dropdown.Item href=\"#/action-1\">GIF</Dropdown.Item> */}\r\n                    {/* <Dropdown.Item eventKey=\"GIF\">GIF</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"Link\">Link</Dropdown.Item>\r\n                </DropdownButton> */}\r\n                {/* <br /> */}\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n            {/* <div>\r\n                \r\n            </div> */}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SubmitForm","const Notification = ({ message }) => {\r\n    if (message === '') {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"notif\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import axios from 'axios'\r\n// const baseUrl = 'http://localhost:3001/links'\r\nconst baseUrl = '/api/links' // Use relative url\r\n// Now HTTP GET requests to the address www.serversaddress.com/index.html or www.serversaddress.com will show the React frontend. GET requests to the address www.serversaddress.com/api/notes will be handled by the backend's code.\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst getAllGIFs = () => {\r\n  const request = axios.get(`${baseUrl}/GIF`)\r\n  // return request.then(response => response.data)\r\n   return request.then(response => {\r\n    console.log(response) \r\n    return response.data\r\n   })\r\n}\r\n\r\nconst getAllLinks = () => {\r\n  const request = axios.get(`${baseUrl}/link`)\r\n  // return request.then(response => response.data)\r\n  return request.then(response => {\r\n    console.log(response)\r\n    return response.data\r\n   })\r\n}\r\n\r\nconst create = linkObject => {\r\n  const request = axios.post(baseUrl, linkObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, linkObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, linkObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return getAll()\r\n}\r\nexport default { getAll, getAllGIFs, getAllLinks, create, update, remove }","import React, { useState, useEffect } from 'react'\r\nimport GIFs from './components/GIFs'\r\nimport Links from './components/Links'\r\nimport SubmitForm from './components/SubmitForm'\r\nimport Notification from './components/Notification'\r\nimport linkService from './services/links'\r\nimport './App.css'\r\nimport './services/reactGA'\r\nimport { initGA, trackingPageGA } from './services/reactGA'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'blue',\r\n    background: 'gray',\r\n    fontStyle: 'italic',\r\n    fontSize: 25,\r\n    left:0,\r\n    bottom:0,\r\n    right:0\r\n  }\r\n  return (\r\n    <div style={footerStyle} className=\"footer\">\r\n      <em>comments/feedback to: <a href=\"https://github.com/c6z3h\">c6z3h</a></em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  \r\n  const hook = () => {\r\n    initGA()\r\n    trackingPageGA('/')\r\n  }\r\n\r\n  useEffect(hook, [])\r\n  \r\n // google analytics events\r\n//  const googleAnalyticsEvent = () => {\r\n//   eventGA('main-button', 'buttonAction');\r\n// }\r\n\r\n// return (\r\n//   <div className=\"App\">\r\n//     <header className=\"App-header\">\r\n//       <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//       <button className=\"App-button\" onClick={googleAnalyticsEvent}>\r\n\r\n  // 0. READ GIFs\r\nconst hook1 = () => {\r\n  linkService\r\n  .getAllGIFs()\r\n  .then(allLinks => {\r\n    console.log(`this is allLinks: ${allLinks}`)\r\n    setGIFLinks(allLinks)\r\n  })\r\n}\r\n\r\nuseEffect(hook1, [])\r\n// 0. READ LINKs\r\nconst hook2 = () => {\r\n  linkService\r\n  .getAllLinks()\r\n  .then(allLinks => {\r\n    console.log(`this is allLinks: ${allLinks}`)\r\n    setWebLinks(allLinks)\r\n  })\r\n}\r\n\r\nuseEffect(hook2, [])\r\n\r\n  // 1. INIT -- for user-submission\r\n  const [ links, setLinks ] = useState([]) \r\n  const [ newLink, setNewLinks ] = useState('')\r\n  const [ newType, setNewType ] = useState('GIF')\r\n  const [notifMessage, setNotifMessage] = useState('')\r\n// 1. INIT -- for rendering GIF or weblinks\r\n  const [ GIFLinks, setGIFLinks ] = useState([])\r\n  const [ webLinks, setWebLinks ] = useState([])\r\n\r\n  // // Event Handler\r\n  const handleLinkChange = (event) => setNewLinks(event.target.value)\r\n  const handleTypeChange= (event) => setNewType(event.target.value)\r\n  const handleGIFChange = (event) => setGIFLinks(...GIFLinks)\r\n\r\n  // // Filter\r\n  // const peopleToShow = filter\r\n  //       ? persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\r\n  //       : persons\r\n\r\n  // 2. CREATE or UPDATE PERSON\r\n  const addLink = (event) => {\r\n    event.preventDefault()\r\n    const linkObject = {\r\n      // id: links.length + 1,\r\n      link: newLink,\r\n      type: newType,\r\n    }\r\n    console.log(`This is the linkObject ${linkObject}, link ${linkObject.link}, and type ${linkObject.type}`)\r\n      linkService\r\n        .create(linkObject)\r\n        .then(returnedLinks =>{\r\n          setLinks(links.concat(returnedLinks))\r\n        setNotifMessage(`Added ${linkObject.link}`)\r\n        setTimeout(() => {\r\n          setNotifMessage('')\r\n        }, 5000)\r\n      })\r\n      .catch(error => {\r\n        console.log(error.response.data)\r\n        setNotifMessage(`${error.response.data.error}`)\r\n        setTimeout(() => {\r\n          setNotifMessage('')\r\n        }, 5000)\r\n      })\r\n    // }\r\n    setNewLinks('')\r\n    setNewType('')\r\n  }\r\n \r\n  const addLinkData = {\r\n    // INITIALLY addPerson, newName and newNumber\r\n    newLink,\r\n    newType,\r\n    handleLinkChange,\r\n    handleTypeChange\r\n  }\r\n\r\n  const randomNumberGenerator = (ListOfLinkOfChoice) => {\r\n    return Math.floor(Math.random()*ListOfLinkOfChoice.length)\r\n  }\r\n\r\n  const refresh = {\r\n    handleGIFChange\r\n  }\r\n\r\n//   const GIFs = ({url, randomNumber}) => {\r\n//     console.log(url)\r\n//     if (url.length !== 0){\r\n//       return url[randomNumber].link\r\n//     }\r\n//     return null\r\n// }\r\n//  console.log(`randGenerator GIFLinks[${randomNumberGenerator(GIFLinks)}`)\r\n// const pictureArray = [{skyPicture1}, {skyPicture2}, {skyPicture3}, {skyPicture4}];\r\n\r\nconst GIFArray = GIFLinks.map(GIFobject => GIFobject.link)\r\nconsole.log(`IMMA GIFLINKS ${JSON.stringify(GIFLinks)}`)\r\nconsole.log(`IMMA GIFARRAY ${GIFArray}`)\r\nconst randomIndex = Math.floor(Math.random() * GIFArray.length);\r\nconst selectedPicture = GIFArray[randomIndex];\r\nconsole.log(`IMMA selected ${selectedPicture}`)\r\n\r\nreturn (\r\n    // <div> style={{ backgroundImage: `url(${GIFLinks[randomNumberGenerator(GIFLinks)].link})` }}>\r\n  <div style={{ backgroundImage: `url(${selectedPicture})`}} className=\"background-image\">\r\n    {/* <div> */}\r\n       <Notification message={notifMessage} />\r\n       < br />\r\n       <h1 className=\"line__1\">Welcome! What inspiration</h1>\r\n       <h1 className=\"line__2\">will you find today?</h1>\r\n       < br />\r\n       {/* <GIFs url={GIFLinks} randomNumber={randomNumberGenerator(GIFLinks)}/> */}\r\n       <Links url={webLinks} randomNumber={randomNumberGenerator(webLinks)}/>\r\n       <p className=\"body\"> Add a GIF or Link to inspire someone else below! </p>\r\n       <SubmitForm addLink={addLink} data={addLinkData} />\r\n       <Footer/> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactGA from 'react-ga';\r\n// ReactGA.initialize('UA-000000-01');\r\n// ReactGA.pageview(window.location.pathname + window.location.search);\r\nconst TRACKING_ID = 'UA-212129212-1';\r\n\r\nexport const initGA = () => {\r\n  ReactGA.initialize(TRACKING_ID);\r\n};\r\n\r\nexport const trackingPageGA = (page) => {\r\n  ReactGA.pageview(page);\r\n};\r\n\r\nexport const eventGA = (categoryName, eventName) => {\r\n  ReactGA.event({\r\n    category: categoryName, // Required\r\n    action: eventName, // Required\r\n    label: 'labelName',\r\n    value: 10,\r\n    nonInteraction: false,\r\n  });\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}